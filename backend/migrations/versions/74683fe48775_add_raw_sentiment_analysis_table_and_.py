"""add_raw_sentiment_analysis_table_and_update_alerts"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For JSON type

# revision identifiers, used by Alembic.
revision: str = '74683fe48775'
down_revision: Union[str, None] = '59d4b0309cc3' # Assuming previous migration was 59d4b0309cc3
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create raw_sentiment_analyses table
    # op.create_table('raw_sentiment_analyses',
    #     sa.Column('id', sa.Integer(), nullable=False),
    #     sa.Column('symbol', sa.String(), nullable=True),
    #     sa.Column('text_content_hash', sa.String(), nullable=False),
    #     sa.Column('text_content', sa.String(), nullable=False),
    #     sa.Column('source', sa.String(), nullable=False),
    #     sa.Column('sentiment_label', sa.String(), nullable=False),
    #     sa.Column('sentiment_score', sa.Float(), nullable=False),
    #     sa.Column('all_scores', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    #     # Changed server_default to sa.func.now() for PostgreSQL compatibility
    #     sa.Column('analyzed_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
    #     sa.Column('source_created_at', sa.DateTime(), nullable=True),
    #     sa.PrimaryKeyConstraint('id')
    # )
    # op.create_index(op.f('ix_raw_sentiment_analyses_id'), 'raw_sentiment_analyses', ['id'], unique=False)
    # op.create_index(op.f('ix_raw_sentiment_analyses_symbol'), 'raw_sentiment_analyses', ['symbol'], unique=False)
    # op.create_index(op.f('ix_raw_sentiment_analyses_text_content_hash'), 'raw_sentiment_analyses', ['text_content_hash'], unique=True)
    # op.create_index(op.f('ix_raw_sentiment_analyses_source'), 'raw_sentiment_analyses', ['source'], unique=False)
    # op.create_index(op.f('ix_raw_sentiment_analyses_analyzed_at'), 'raw_sentiment_analyses', ['analyzed_at'], unique=False)
    # op.create_index(op.f('ix_raw_sentiment_analyses_source_created_at'), 'raw_sentiment_analyses', ['source_created_at'], unique=False)
    # op.create_index('idx_raw_sentiment_symbol_source_created', 'raw_sentiment_analyses', ['symbol', 'source', 'source_created_at'], unique=False)

    # Modify alerts table
    # op.add_column('alerts', sa.Column('name', sa.String(), nullable=True))
    # Assuming 'last_triggered' was the old column name to be renamed to 'last_triggered_at'
    # If 'last_triggered_at' is entirely new and 'last_triggered' didn't exist or was different, this needs adjustment.
    # For now, let's assume 'last_triggered_at' is new, and we drop old columns if they existed.
    # op.add_column('alerts', sa.Column('last_triggered_at', sa.DateTime(), nullable=True))
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Revert alerts table modifications
    with op.batch_alter_table('alerts') as batch_op:
        batch_op.drop_column('name')
        batch_op.drop_column('last_triggered_at')
        # Add back old columns if they were dropped. This requires knowing their exact old definition.
        batch_op.add_column(sa.Column('alert_type', sa.VARCHAR(), autoincrement=False, nullable=True)) # Adjust type if needed
        batch_op.add_column(sa.Column('last_checked', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)) # Adjust type if needed
        batch_op.add_column(sa.Column('last_triggered', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)) # Adjust type if needed

    # Drop raw_sentiment_analyses table
    # op.drop_index('idx_raw_sentiment_symbol_source_created', table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_source_created_at'), table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_analyzed_at'), table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_source'), table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_text_content_hash'), table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_symbol'), table_name='raw_sentiment_analyses')
    # op.drop_index(op.f('ix_raw_sentiment_analyses_id'), table_name='raw_sentiment_analyses')
    # op.drop_table('raw_sentiment_analyses')
    # ### end Alembic commands ###
